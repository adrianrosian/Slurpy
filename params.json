{"name":"Slurpy","tagline":"Slurpy is a PHP5 wrapper for the pdftk command-line tool for working with PDF.","body":"# Slurpy\r\n\r\nSlurpy is a PHP5 wrapper for the [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) command-line tool\r\nfor working with PDF. This library is largely inspired by [Snappy](https://github.com/KnpLabs/snappy) from KnpLabs, \r\na library for generating images or pdf from html. Some of the Slurpy code comes directly from Snappy.\r\n\r\nIn order to use Slurpy you will have to download [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) for\r\neither Windows, Mac OSX or linux.\r\n\r\n[![Build Status](https://secure.travis-ci.org/baikunz/Slurpy.png?branch=master)](http://travis-ci.org/baikunz/Slurpy)\r\n\r\n## Installation using [Composer](http://getcomposer.org/)\r\n\r\nAdd to your `composer.json`:\r\n\r\n```json\r\n{\r\n    \"require\" :  {\r\n        \"baikunz/slurpy\": \"*\"\r\n    }\r\n}\r\n```\r\n\r\n## Installation of the [pdftk](http://www.pdflabs.com/tools/pdftk-the-pdf-toolkit/) binary\r\n\r\nYou have to follow instructions on the pdftk web page to install the pdftk package. Either by downloading\r\nan installer if you run on Windows or Mac OSX or compiling it from source on linux. \r\n\r\n## Simple usage\r\n\r\nPlease refer to the [pdftk documentation](http://www.pdflabs.com/docs/pdftk-man-page/) for more details\r\non each operations.\r\n\r\n### Create the factory\r\n\r\nSlurpy comes with a simple factory for dealing with pdftk operations in their simple forms.\r\n\r\n```php\r\n<?php\r\n\r\nrequire_once '/path/to/slurpy/src/autoload.php';\r\n\r\n// Create a new factory instance, give it your path to pdftk binary\r\n$factory = new \\Shuble\\Slurpy\\Factory('/path/to/pdftk');\r\n```\r\n\r\n### Catenate PDF files\r\n\r\nAssembles (\"catenates\") pages from input PDFs to create a new PDF.\r\nUse cat to merge PDF pages or to split PDF pages from documents.\r\nYou can also use it to rotate PDF pages. Page order in the new PDF\r\nis specified by the order of the inputs array.\r\n\r\n```php\r\n<?php\r\n\r\nuse Shuble\\Slurpy\\Operation\\OperationArgument\\PageRange;\r\n\r\n$inputs = array(\r\n    '/path/to/file1.pdf',\r\n    '/path/to/file2.pdf',\r\n    array(\r\n        'filepath'   => '/path/to/file3.pdf',\r\n        'password'   => 'pa$$word',\r\n        'start_page' => 1,\r\n        'end_page'   => 'end',\r\n        'qualifier'  => PageRange::QUALIFIER_ODD,\r\n        'rotation'   => PageRange::ROTATION_EAST,\r\n    )\r\n);\r\n\r\n$output = '/path/to/output.pdf';\r\n\r\n// Creates a Slurpy instance\r\n$slurpy = $factory->cat($inputs, $output);\r\n\r\n// Run the operation\r\n$slurpy->generate();\r\n```\r\n\r\nNow, `/path/to/ouput.pdf` contains the 3 pdfs, with only odd pages rotated to east for the third pdf. \r\n\r\n### Shuffle PDF files\r\n\r\nCollates pages from input PDFs to create a new PDF. Works like the cat operation except that it takes\r\none page at a time from each page range to assemble the output PDF. If one range runs out of pages,\r\nit continues with the remaining ranges. This feature was designed to help collate PDF pages after\r\nscanning paper documents.\r\n\r\n```php\r\n<?php\r\n\r\nuse Shuble\\Slurpy\\Operation\\OperationArgument\\PageRange;\r\n\r\n$inputs = array(\r\n    '/path/to/file1.pdf',\r\n    '/path/to/file2.pdf',\r\n    array(\r\n        'filepath'   => '/path/to/file3.pdf',\r\n        'password'   => 'pa$$word',\r\n        'start_page' => 1,\r\n        'end_page'   => 'end',\r\n        'qualifier'  => PageRange::QUALIFIER_ODD,\r\n        'rotation'   => PageRange::ROTATION_EAST,\r\n    )\r\n);\r\n\r\n$output = '/path/to/output.pdf';\r\n\r\n// Creates a Slurpy instance\r\n$slurpy = $factory->shuffle($inputs, $output);\r\n\r\n// Run the operation\r\n$slurpy->generate();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}